spring:
  application:
    name: lagou-service-autodeliver

server:
  port: 9899

  #注册服务到eureka集群
eureka:
  client:
    service-url:
      defaultZone: http://LagouCloudEurekaServerA:8761/eureka,http://LagouCloudEurekaServerB:8762/eureka
  instance:
    prefer-ip-address: true #服务器实例中显示IP，而不是主机名，使⽤ip注册，否则会使⽤主机名注册了（此处考虑到对⽼版本的兼容，新版本经过实验都是ip）
    instance-id: ${spring.cloud.client.ip-address}:${spring.application.name}:${server.port}:@project.version@ #⾃定义实例名称显示格式，加上版本号，便于多版本管理，注意是ip-address，早期版本是ipAddress



#针对的被调⽤⽅微服务名称,不加就是全局⽣效
lagou-service-resume:
  ribbon:
    #请求连接超时时间
    ConnectTimeout: 2000
    #请求处理超时时间,feign的超时时长
    ReadTimeout: 5000
    #对所有操作都进⾏重试
    OkToRetryOnAllOperations: true
    ####根据如上配置，当访问到故障请求的时候，它会再尝试访问⼀次当前实例（次数由MaxAutoRetries配置），
    ####如果不⾏，就换⼀个实例进⾏访问，如果还不⾏，再换⼀次实例访问（更换次数由MaxAutoRetriesNextServer配置），
    ####如果依然不⾏，返回失败信息。
    MaxAutoRetries: 2 #对当前选中实例重试次数，不包括第⼀次调⽤
    MaxAutoRetriesNextServer: 2 #切换实例的重试次数
    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RoundRobinRule #负载策略调整


logging:
  level:
    # Feign⽇志只会对⽇志级别为debug的做出响应
    com.lagou.edu.service.ResumeFeignClient: debug



feign:
  # 开启Feign的熔断功能
  hystrix:
    enabled: true

  #Feign ⽀持对请求和响应进⾏GZIP压缩，以减少通信过程中的性能损耗。
  compression:
    request:
      # 开启请求压缩
      enabled: true
      # 设置压缩的数据类型，此处也是默认值
      mime-types: text/html,application/xml,application/json
      min-request-size: 2048
      # 设置触发压缩的⼤⼩下限，此处也是默认值
    response:
      enabled: true
      # 开启响应压缩

#Hystrix的超时时⻓设置
hystrix:
  command:
    default:
      execution:
        isolation:
          thread:
            timeoutInMilliseconds: 5000

  #Feign的超时时⻓设置那其实就上⾯Ribbon的超时时⻓设置
  #Hystrix超时设置（就按照之前Hystrix设置的⽅式就OK了）
  #注意：
  #1）开启Hystrix之后， Feign中的⽅法都会被进⾏⼀个管理了，⼀旦出现问题就进⼊对应的回退逻辑处理
  #2）针对超时这⼀点，当前有两个超时时间设置（Feign/hystrix），熔断的时候是根据这两个时间的最⼩值来进⾏的，即处理时⻓超过最短的那个超时时间了就熔断进⼊回退降级逻辑